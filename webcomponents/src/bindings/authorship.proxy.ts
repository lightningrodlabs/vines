/* This file is generated by zits. Do not edit manually */

import {AUTHORSHIP_DEFAULT_COORDINATOR_ZOME_NAME, AUTHORSHIP_DEFAULT_INTEGRITY_ZOME_NAME, AUTHORSHIP_DEFAULT_ROLE_NAME, ROOT_ANCHOR_AUTHORSHIP, ROOT_ANCHOR_UNKNOWN_AUTHOR, AuthorshipEntry, AscribeTargetInput, AuthorshipLog, Bogus, } from './authorship.types';
import {
WebsocketConnectionOptions,
/** types.ts */
//HoloHash,
//AgentPubKey,
//DnaHash,
//WasmHash,
//EntryHash,
//ActionHash,
//AnyDhtHash,
//ExternalHash,
KitsuneAgent,
KitsuneSpace,
HoloHashB64,
AgentPubKeyB64,
DnaHashB64,
WasmHashB64,
EntryHashB64,
ActionHashB64,
AnyDhtHashB64,
InstalledAppId,
Signature,
CellId,
DnaProperties,
RoleName,
InstalledCell,
Timestamp,
Duration,
HoloHashed,
NetworkInfo,
FetchPoolInfo,
/** hdk/action.ts */
SignedActionHashed,
RegisterAgentActivity,
ActionHashed,
ActionType,
Action,
NewEntryAction,
Dna,
AgentValidationPkg,
InitZomesComplete,
CreateLink,
DeleteLink,
OpenChain,
CloseChain,
Update,
Delete,
Create,
/** hdk/capabilities.ts */
CapSecret,
CapClaim,
GrantedFunctionsType,
GrantedFunctions,
ZomeCallCapGrant,
CapAccessType,
CapAccess,
CapGrant,
///** hdk/countersigning.ts */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** hdk/dht-ops.ts */
DhtOpType,
DhtOp,
getDhtOpType,
getDhtOpAction,
getDhtOpEntry,
getDhtOpSignature,
/** hdk/entry.ts */
EntryVisibility,
AppEntryDef,
EntryType,
EntryContent,
Entry,
/** hdk/record.ts */
Record as HcRecord,
RecordEntry as HcRecordEntry,
/** hdk/link.ts */
AnyLinkableHash,
ZomeIndex,
LinkType,
LinkTag,
RateWeight,
RateBucketId,
RateUnits,
Link,
/** api/admin/types.ts */
InstalledAppInfoStatus,
DeactivationReason,
DisabledAppReason,
StemCell,
ProvisionedCell,
ClonedCell,
CellType,
CellInfo,
AppInfo,
MembraneProof,
FunctionName,
ZomeName,
ZomeDefinition,
IntegrityZome,
CoordinatorZome,
DnaDefinition,
ResourceBytes,
ResourceMap,
CellProvisioningStrategy,
CellProvisioning,
DnaVersionSpec,
DnaVersionFlexible,
AppRoleDnaManifest,
AppRoleManifest,
AppManifest,
AppBundle,
AppBundleSource,
NetworkSeed,
ZomeLocation,
   } from '@holochain/client';


/// Simple Hashes
type AgentArray = Uint8Array;
type DnaArray = Uint8Array;
type WasmArray = Uint8Array;
type EntryArray = Uint8Array;
type ActionArray = Uint8Array;
type AnyDhtArray = Uint8Array;
type AnyLinkableArray = Uint8Array;

import {
/** Common */
DhtOpHashB64,
//DnaHashB64, (duplicate)
//AnyDhtHashB64, (duplicate)
DhtOpHash,
/** DnaFile */
DnaFile,
DnaDef,
Zomes,
WasmCode,
/** entry-details */
EntryDetails,
RecordDetails,
Details,
DetailsType,
EntryDhtStatus,
/** Validation */
ValidationStatus,
ValidationReceipt,
   } from '@holochain-open-dev/core-types';

import {ZomeProxy} from '@ddd-qc/lit-happ';
import {authorshipFunctionNames} from './authorship.fn';
import {AuthorshipUnitEnum, AuthorshipLinkType} from './authorship.integrity';

/**
 *
 */
export class AuthorshipProxy extends ZomeProxy {
  static readonly DEFAULT_ZOME_NAME = "zAuthorship";
  static readonly FN_NAMES = authorshipFunctionNames;
  static readonly ENTRY_TYPES = Object.values(AuthorshipUnitEnum);
  static readonly LINK_TYPES = Object.values(AuthorshipLinkType);
 
  async ascribeTarget(input: AscribeTargetInput): Promise<void> {
    return this.callBlocking('ascribe_target', input);
  }

  async ascribeAppEntry(ah: ActionArray): Promise<[Timestamp, AgentArray, string]> {
    return this.callBlocking('ascribe_app_entry', ah);
  }

  async getAllAscribedTypes(): Promise<string[]> {
    return this.call('get_all_ascribed_types', null);
  }

  async getAuthor(target: AnyLinkableArray): Promise<[Timestamp, AgentArray] | null> {
    return this.call('get_author', target);
  }

  async getAllAscribedEntries(): Promise<[string, AnyLinkableArray, Timestamp, AgentArray][]> {
    return this.call('get_all_ascribed_entries', null);
  }

  async getAscribedTypeChildren(targetType: string): Promise<[AnyLinkableArray, Timestamp, AgentArray][]> {
    return this.call('get_ascribed_type_children', targetType);
  }
}
